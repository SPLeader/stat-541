---
title: "Week 1:  Review of Data Wrangling"
format: 
  html: 
    fontsize: 1em
    mainfont: sans-serif
    number-sections: true
    number-depth: 2
    section-divs: true
    code-block-bg: "#76b5c5"
    highlight-style: monochrome
embed-resources: true
editor: visual
execute: 
  echo: true
  warning: false
  message: false
---

```{r}
#| label: set-up
#| include: false

source("../scripts/window_dressing.R")
library(tidyverse)
library(palmerpenguins)
```


(Since Week 1 consists of review of Stat 331 material, you should be able to skip some of the required readings and viewings. It is your responsibility to decide which areas you need to review before diving into Stat 541.)

```{r}
#| results: asis
#| echo: false
#| label: summary-table-of-activities

make_summary_table(vid_time = "0-45 min", 
                   reading_time = "0-90 min", 
                   work_time = "0-45 min", 
                   canvas_activities = 3)
```

```{r}
#| results: asis
#| echo: false
#| label: extra-recommendations

extra_rec("")
```

-   [RStudio Cheatsheets](https://rstudio.com/resources/cheatsheets/) are a great shortcut resource to have on hand, to remind you of which functions exist and what they do.
-   The [R for Data Science Textbook](https://r4ds.had.co.nz/) is free online.
-   [RStudio's Primers](https://rstudio.cloud/learn/primers) are interactive lessons on the basics of R; these would be a great way to refresh your knowledge.

## Reading Data

You should feel comfortable with:

-   Reading data into R from a url.

-   Downloading data locally and reading it into R.

-   Dealing with `.csv` files, `.txt` files with a variety of delimiters, and Excel files.

-   Handling different variable types, especially **strings** and **factors**, and adjusting them if needed.

-   Using `readLines()` and/or `read_lines()` to load a file line by line.

```{r}
#| results: asis
#| echo: false
#| label: required-video-readr

req_vid("readr and readxl", type = "Required", url = "https://www.youtube.com/embed/MTljwff_-2A")
```

```{r}
#| results: asis
#| echo: false
#| label: required-reading-data-import

req_read("R4DS Chapter 11: Data Import", url = "https://r4ds.hadley.nz/data-import.html", type = "Recommended")
```

## Data Frames, Tibbles, Piping

You should feel comfortable with:

-   Using the pipe operator (`%>%`)

-   Describing the overall structure and contents of a data frame or tibble.

-   Finding basic summary statistics for a data frame.

```{r}
#| results: asis
#| echo: false
#| label: required-video-pipe

req_vid("Data Frames and the Pipe", url="https://www.youtube.com/embed/jOd65mR1zfw")
```

```{r}
#| results: asis
#| echo: false
#| label: required-reading-tibbles

req_read("R4DS Chapter 10: Tibbles", url = "https://r4ds.had.co.nz/tibbles.html", type = "Recommended")
```

```{r}
#| results: asis
#| echo: false
#| label: required-reading-pipes

req_read("R4DS Chapter 4: Workflow, Code Style", url = "https://r4ds.hadley.nz/workflow-style.html", type = "Recommended")
```

## Data Transformation

You should feel comfortable:

-   Using the five main `dplyr` verbs:

    -   `filter()`

    -   `arrange()`

    -   `select()`

    -   `mutate()`

    -   `summarize()`

-   Using `group_by()` to perform groupwise operations

-   Using at least a few other `dplyr` verbs for more nuanced tasks

```{r}
#| results: asis
#| echo: false
#| label: required-reading-

req_read("R4DS Chapter 3: Data Transformation", url = "https://r4ds.hadley.nz/data-transform.html", type = "Required")
```

```{r}
#| results: asis
#| echo: false
#| label: required-video-dplyr0-short

req_vid("dplyr (short)", url="https://www.youtube.com/embed/BaFkbNOaof8")
```

```{r}
#| results: asis
#| echo: false
#| label: recommended-video-dplyr-long

req_vid("dplyr (long)", url = "https://www.youtube.com/embed/Zc_ufg4uW4U", type = "Recommended")
```

```{r}
#| results: asis
#| echo: false
#| label: check-in-dplyr-pipe

checkin("dplyr and piping")
```

*To get the full intended practice in this Check-In, you should try to answer these questions **WITHOUT** actually running the code.*

Recall the world-famous `penguins` dataset (from the **palmerpenguins** package):

```{r}
head(penguins)
```

**Question 1:** Suppose we would like to study how the ratio of penguin body mass to flipper size differs across the species. Arrange the following steps into an order that accomplishes this goal (assuming the steps are connected with a `|>` or a `%>%`).

```{r}
#| include: false
#| label: penguins-pipeline

penguins |>
  mutate(
    mass_flipper_ratio = body_mass_g/flipper_length_mm
  ) |>
  group_by(species) |>
  summarize(
    avg_mass_flipper_ratio = median(mass_flipper_ratio)
  ) |>
  arrange(avg_mass_flipper_ratio)

#cebda
```

```{r}
#| eval: false
#| echo: true
#| label: pipe-options

# a
arrange(med_mass_flipper_ratio)


# b
group_by(species)


# c
penguins 
  

# d
summarize(
  med_mass_flipper_ratio = median(mass_flipper_ratio)
)

  
# e
mutate(
  mass_flipper_ratio = body_mass_g / flipper_length_mm
)
```

**Question 2:** Consider the base R code below.

```{r}
#| echo: true
#| eval: false
#| label: mean-mass-base-R

mean(penguins[penguins$species == "Adelie", ]$body_mass_g)
```

For each of the following `dplyr` pipelines, indicate which of the following is true:

(i) It returns the exact same thing as the (above) base R code
(ii) It returns the correct information, but the wrong object type
(iii) It returns incorrect information
(iv) It returns an error

```{r}
#| echo: true
#| eval: false
#| label: pipeline-examples

# Part a
penguins |>
  filter("body_mass_g") |>
  pull("Adelie") |>
  mean()


# Part b
penguins |>
  filter(species == "Adelie") |>
  select(body_mass_g) |>
  summarize(mean(body_mass_g))


# Part c
penguins |>
  pull(body_mass_g) |>
  filter(species == "Adelie") |>
  mean()


# Part d
penguins |>
  filter(species == "Adelie") |>
  select(body_mass_g) |>
  mean()


# Part e
penguins |>
  filter(species == "Adelie") |>
  pull(body_mass_g) |>
  mean()


# Part f
penguins |>
  select(species == "Adelie") |>
  filter(body_mass_g) |>
  summarize(mean(body_mass_g))
```


## Tidy Data and Combining Datasets

You should feel comfortable with:

-   Understanding what it means for data to be "tidy"

-   Using the `join_*()` family of functions to combine data.

-   Using `bind_rows()` and `bind_cols()`, or `cbind()` and `rbind()`, to combine data.

-   Using `pivot_longer()` and `pivot_wider()` to transform data.

-   Finding basic summary statistics for a data frame.

```{r}
#| results: asis
#| echo: false
#| label: required-reading-tidy-data

req_read("R4DS Chapter 5: Data Tidying", url = "https://r4ds.hadley.nz/data-tidy.html")
```

```{r}
#| results: asis
#| echo: false
#| label: recommended-video-tidying

req_vid("Tidy Data", url = "https://www.youtube.com/embed/1ELALQlO-yM", type = "Recommended")
```

(Note: This video uses `spread()` and `gather()`. These functions are now replaced with `pivot_longer()` and `pivot_wider()`.)

```{r}
#| results: asis
#| echo: false
#| label: required-video-joining

req_vid("Binding and Joining", url = "https://www.youtube.com/embed/AuBgYDCg1Cg", type = "Recommended")
```

```{r}
#| results: asis
#| echo: false
#| label: check-in-pivot

checkin("Pivoting")
```

```{r}
#| include: false
#| label: arrests-data

us_arrests <- USArrests %>% 
  select(-Rape)
```

Consider the following dataset, which contains information about arrests for violent crimes in each state:

```{r}
#| label: preview-arrests

head(us_arrests)
```

**Question 1:** Consider the following code. What does it do, and why might it be an important step before reshaping the data?

```{r}
#| eval: false
#| label: row-to-column-names

us_arrests <- us_arrests %>%
  rownames_to_column(var = "State")
```

**Question 2:** Fill in the blanks for the code that will produce the following:

```{r}
#| include: false
#| label: pivot-arrests

us_arrests %>%
  pivot_longer(cols = Murder:Assault,
               names_to = "Crime",
               values_to = "Rate")
```

